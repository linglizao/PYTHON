# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DataMaster.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import os
from PyQt5 import QtCore, QtGui, QtWidgets
from openpyxl import load_workbook
#import xlrd3 as xlrd
#import xlwt
import numpy as np
from xlutils.copy import copy

#结构体定义
class reslt:
    def __init__(self):
        self.pct0 = 0;
        self.pct1 = 0;
        self.pct2 = 0;
        self.output = '';

#读取excel
def handle_excel(excel_dir):
    sheets_input = load_workbook(excel_dir)
    sheets_total = sheets_input.sheetnames
    for sheet_sel in sheets_input:
        rows = sheet_sel.max_row
        cols = sheet_sel.max_column

        # 遍历数据
        # ctype : 0 empty,1 string, 2 number, 3 date, 4 boolean, 5 error
        for col in range(1,cols+1):
            data_array = []
            for row in range(1,rows+1):
                if (int==type(sheet_sel.cell(row, col).value)) or (float==type(sheet_sel.cell(row, col).value)):
                    data_array.append(sheet_sel.cell(row, col).value)
            if len(data_array) > 0:
                reslt.pct0 = np.percentile(data_array, 25)
                reslt.pct1 = np.percentile(data_array, 50)
                reslt.pct2 = np.percentile(data_array, 75)
                reslt.output = str(reslt.pct1) + '(' + str(reslt.pct0) + ',' + str(reslt.pct2) + ')'
                sheet_sel.cell(rows+1, col).value =  reslt.output
                print(reslt.output)
    os.remove(excel_dir)
    sheets_input.save(excel_dir)

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(408, 219)
        self.gridLayout = QtWidgets.QGridLayout(Form)
        self.gridLayout.setObjectName("gridLayout")


        # Open按钮
        self.Open = QtWidgets.QPushButton(Form)
        self.Open.setObjectName("Open")
        self.gridLayout.addWidget(self.Open, 0, 1, 1, 1)
        self.Open.clicked.connect(self.Open_button_click)


        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 0, 0, 1, 1)


        self.AllSheets = QtWidgets.QCheckBox(Form)
        self.AllSheets.setObjectName("AllSheets")
        self.gridLayout.addWidget(self.AllSheets, 2, 0, 1, 1)


        self.filelist = QtWidgets.QListView(Form)
        self.filelist.setObjectName("filelist")
        self.gridLayout.addWidget(self.filelist, 1, 0, 1, 1)


        # 计算按钮
        self.Calc = QtWidgets.QPushButton(Form)
        self.Calc.setObjectName("Calc")
        self.gridLayout.addWidget(self.Calc, 1, 1, 1, 1)
        self.Calc.clicked.connect(self.Calc_button_click)


        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.Open.setText(_translate("Form", "打开"))
        self.AllSheets.setText(_translate("Form", "AllSheets"))
        self.Calc.setText(_translate("Form", "计算"))

    def Open_button_click(self):
        fileName, filetype = QtWidgets.QFileDialog.getOpenFileName(self.Open, "选择文件", "/", "All Files (*)")
        self.lineEdit.setText(fileName)

    def Calc_button_click(self):
        # 路径
        excel_dir = self.lineEdit.text()
        handle_excel(excel_dir)
        # 提示计算结果完成
        #QMessageBox.about(self, "标题", "关于对话框消息正文")

if __name__=="__main__":
    app=QtWidgets.QApplication(sys.argv)
    widget=QtWidgets.QWidget()
    ui=Ui_Form()
    ui.setupUi(widget)
    widget.show()
    sys.exit(app.exec_())
