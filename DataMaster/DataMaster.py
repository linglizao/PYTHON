# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DataMaster.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import os
from PyQt5 import QtCore, QtGui, QtWidgets
from openpyxl import load_workbook

import numpy as np
from xlutils.copy import copy
os.environ["CUDA_VISIBLE_DEVICES"] = "-1"

#结构体定义
class reslt:
    def __init__(self):
        self.pct0 = 0;
        self.pct1 = 0;
        self.pct2 = 0;
        self.output = '';


def handle_excel(sheet_sel):
    print('handle_excel begin')
    rows = sheet_sel.max_row
    cols = sheet_sel.max_column
    print(rows)
    print(cols)

    # 遍历数据
    for col in range(1, cols + 1):
        data_array = []
        for row in range(1, rows + 1):
            val_get = sheet_sel.cell(row, col).value
            print(val_get)
            if (int == type(val_get)) or (float == type(val_get)):
                data_array.append(val_get)
            elif (str == type(val_get)) and (val_get[0] != '0'):
                if(True == val_get.replace(".", "").isdigit()):
                    data_array.append(eval(val_get))
        if len(data_array) > 0:
            print("col calculate %d"%col)
            reslt.pct0 = np.percentile(data_array, 25)
            reslt.pct1 = np.percentile(data_array, 50)
            reslt.pct2 = np.percentile(data_array, 75)
            reslt.output = str(reslt.pct1) + '(' + str(reslt.pct0) + ',' + str(reslt.pct2) + ')'
            sheet_sel.cell(rows + 1, col).value = reslt.output
    print('handle_excel done')

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(408, 219)
        self.gridLayout = QtWidgets.QGridLayout(Form)
        self.gridLayout.setObjectName("gridLayout")


        # Open按钮
        self.Open = QtWidgets.QPushButton(Form)
        self.Open.setObjectName("Open")
        self.gridLayout.addWidget(self.Open, 0, 1, 1, 1)
        self.Open.clicked.connect(self.Open_button_click)

        #文本输入框，输入要处理的文件
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 0, 0, 1, 1)

        #复选框，是否选择AllSheets
        self.AllSheets = QtWidgets.QCheckBox(Form)
        self.AllSheets.setObjectName("AllSheets")
        self.gridLayout.addWidget(self.AllSheets, 2, 0, 1, 1)
        # self.AllSheets.stateChanged.connect(self.changeallsheets)


        self.filelist = QtWidgets.QListView(Form)
        self.filelist.setObjectName("filelist")
        self.gridLayout.addWidget(self.filelist, 1, 0, 1, 1)
        self.filelist.clicked.connect(self.filelist_checkItem)

        # 计算按钮
        self.Calc = QtWidgets.QPushButton(Form)
        self.Calc.setObjectName("Calc")
        self.gridLayout.addWidget(self.Calc, 1, 1, 1, 1)
        self.Calc.clicked.connect(self.Calc_button_click)


        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.Open.setText(_translate("Form", "打开"))
        self.AllSheets.setText(_translate("Form", "AllSheets"))
        self.Calc.setText(_translate("Form", "计算"))


    def Open_button_click(self):
        global sheets_input
        # print("Open_button_click begin")
        fileName, filetype = QtWidgets.QFileDialog.getOpenFileName(self.Open, "选择文件", "/", "All Files (*)")
        self.lineEdit.setText(fileName)

        sheets_input = load_workbook(fileName)
        print(sheets_input)
        sheets_total = sheets_input.sheetnames

        listModel = QtCore.QStringListModel()
        listModel.setStringList(sheets_total)
        self.filelist.setModel(listModel)
        # print("Open_button_click done")

    def filelist_checkItem(self, index):
        # print("filelist_checkItem begin")
        global sheets_input
        global sheet_clicked_select

        sheet_clicked_select = sheets_input.worksheets[index.row()]
        # print("filelist_checkItem done")

    def Calc_button_click(self):
        # print("Calc_button_click begin")
        # 路径
        global sheets_input
        global sheet_clicked_select
        excel_dir = self.lineEdit.text()

        if self.AllSheets.checkState() == QtCore.Qt.Checked:
            for sheet_sel in sheets_input:
                handle_excel(sheet_sel)
        else:
            print(sheet_clicked_select)
            handle_excel(sheet_clicked_select)

        os.remove(excel_dir)
        sheets_input.save(excel_dir)
        # print("Calc_button_click done")



if __name__=="__main__":
    app=QtWidgets.QApplication(sys.argv)
    widget=QtWidgets.QWidget()
    ui=Ui_Form()
    ui.setupUi(widget)
    widget.show()
    sys.exit(app.exec_())
